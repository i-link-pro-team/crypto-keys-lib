import * as assert from 'assert'
import * as sinon from 'sinon'
import { describe, it, after, before } from 'mocha'
import { Keys } from '../src'
import { Network, Blockchain } from '../src'
import { Dogecoin } from '../src/blockchains/dogecoin'

describe('Lib/Dogecoin', () => {
    const instance = new Keys(Blockchain.DOGE, Network.MAINNET)
    const instanceWithTestnet = new Keys(Blockchain.DOGE, Network.TESTNET)

    describe('#getDataFromSeed/generateSeedPhrase', () => {
        const seed = instance.generateSeedPhrase(12)
        const actual = instance.getDataFromSeed(seed['seedPhrase'])
        it(`should be return \`${seed['seedPhrase']}\` seedPhrase`, () => {
            assert.strictEqual(actual['seedPhrase'], seed['seedPhrase'])
        })

        it(`should be return \`${seed['masterPublicKey']}\` masterPublicKey`, () => {
            assert.strictEqual(
                actual['masterPublicKey'],
                seed['masterPublicKey'],
            )
        })

        it(`should be return \`${seed['masterPrivateKey']}\ masterPrivateKey`, () => {
            assert.strictEqual(
                actual['masterPrivateKey'],
                seed['masterPrivateKey'],
            )
        })
    })

    describe('#getDefaultPaths', () => {
        const actualPaths = instance.getDefaultPaths()
        it('should return exact paths', () => {
            const expectedPaths = [
                {
                    blockchain: 'dogecoin',
                    network: 'mainnet',
                    path: "m/44'/3'/0'/0/0",
                },
                {
                    blockchain: 'dogecoin',
                    network: 'testnet',
                    path: "m/44'/1'/0'/0/0",
                },
            ]
            assert.deepEqual(actualPaths, expectedPaths)
        })
    })

    describe('#checkSeedPhrase', () => {
        const seedPhrase =
            'program term park ticket dinner jar dumb couch drive song olive panel'
        const actualPositive: boolean | Error = instance.checkSeedPhrase(
            seedPhrase,
        )
        it('should return `true`', () => {
            assert.strictEqual(actualPositive, true)
        })
        const actualNegative: boolean | Error = instance.checkSeedPhrase(
            'invalid',
        )
        it('should return `false`', () => {
            assert.strictEqual(actualNegative, false)
        })
    })

    describe('#derivateKeys', () => {
        context('with testnet network', () => {
            context('with masterPrivateKey', () => {
                let spy
                let actual
                before(done => {
                    spy = sinon.spy(Dogecoin.prototype, 'derivateFromPrivate')
                    const cursor = {
                        skip: 1,
                        limit: 1,
                    }
                    /**
                     * Generated by: https://iancoleman.io/bip39/
                     */
                    const masterPrivateKey = {
                        masterPrivateKey:
                            'tprv8gddMNxfRf4iFfrP2tFseUVkzjEA1SAn15gEVkN4vjr18qjbdYjZ3zFPdbmh7TJxeE7WH6TPHEGiys945UqpEsidg8y4GkKjMRnqWPRw4aj',
                    }
                    actual = instanceWithTestnet.derivateKeys(
                        masterPrivateKey,
                        cursor,
                    )
                    done()
                })
                after((done): void => {
                    sinon.restore()
                    done()
                })
                context('positive result', () => {
                    const expected: [
                        {
                            path: string
                            address: string
                            publicKey: string
                            privateKey: string
                        },
                    ] = [
                        {
                            path: "m/44'/1'/0'/0/2",
                            address: 'nd7k9YnyYqjFFf2UXUdPZsFVh3vh4jqUYK',
                            publicKey:
                                '038f3974bb9ee23d8cb55a6f6e15d3be58693b1348699e459e229d07f31825ab40',
                            privateKey:
                                'chPVs597uAbAm4sGJT1WxoGfQJfx3pCwNkMHtvjYuhQmwHEoDQop',
                        },
                    ]

                    it(`should be return correct ${expected[0]['path']} path`, () => {
                        assert.strictEqual(
                            actual[0]['path'],
                            expected[0]['path'],
                        )
                    })

                    it(`should be return correct ${expected[0]['address']} address`, () => {
                        assert.strictEqual(
                            actual[0]['address'],
                            expected[0]['address'],
                        )
                    })

                    it(`should be return correct ${expected[0]['publicKey']} publicKey`, () => {
                        assert.strictEqual(
                            actual[0]['publicKey'],
                            expected[0]['publicKey'],
                        )
                    })

                    it(`should be call {derivateFromPrivate} function 1 time`, () => {
                        assert.strictEqual(spy.callCount, 1)
                    })

                    it(`should be call {derivateFromPrivate} function with following args 
          ['tprv8gddMNxfRf4iFfrP2tFseUVkzjEA1SAn15gEVkN4vjr18qjbdYjZ3zFPdbmh7TJxeE7WH6TPHEGiys945UqpEsidg8y4GkKjMRnqWPRw4aj',
          { limit: 1, skip: 1 }]`, () => {
                        assert.deepEqual(spy.args[0], [
                            'tprv8gddMNxfRf4iFfrP2tFseUVkzjEA1SAn15gEVkN4vjr18qjbdYjZ3zFPdbmh7TJxeE7WH6TPHEGiys945UqpEsidg8y4GkKjMRnqWPRw4aj',
                            { limit: 1, skip: 1 },
                        ])
                    })
                })
            })

            context('with masterPublicKey', () => {
                let spy
                let actual
                before(done => {
                    spy = sinon.spy(Dogecoin.prototype, 'derivateFromPublic')
                    const cursor = {
                        skip: 1,
                        limit: 1,
                    }
                    /**
                     * Generated by: https://iancoleman.io/bip39/
                     */
                    const masterPublicKey = {
                        masterPublicKey:
                            'tpubDDKfVnzua2kP98tAvXvU3t9sZkk6AmMgaPH1nGQNM1ePyKzNFwZ9EUsFojY6sxGVxtcGe1vw96yUtufVFhVTVccnDumXUcpZ2jvzv95x3aR',
                    }
                    actual = instanceWithTestnet.derivateKeys(
                        masterPublicKey,
                        cursor,
                    )
                    done()
                })
                after((done): void => {
                    sinon.restore()
                    done()
                })
                context('positive result', () => {
                    const expected: [
                        { path: string; address: string; publicKey: string },
                    ] = [
                        {
                            path: "m/44'/1'/0'/0/2",
                            address: 'nd7k9YnyYqjFFf2UXUdPZsFVh3vh4jqUYK',
                            publicKey:
                                '038f3974bb9ee23d8cb55a6f6e15d3be58693b1348699e459e229d07f31825ab40',
                        },
                    ]
                    it(`should be return correct ${expected[0]['path']} path`, () => {
                        assert.strictEqual(
                            actual[0]['path'],
                            expected[0]['path'],
                        )
                    })

                    it(`should be return correct ${expected[0]['address']} address`, () => {
                        assert.strictEqual(
                            actual[0]['address'],
                            expected[0]['address'],
                        )
                    })

                    it(`should be return correct ${expected[0]['publicKey']} publicKey`, () => {
                        assert.strictEqual(
                            actual[0]['publicKey'],
                            expected[0]['publicKey'],
                        )
                    })

                    it(`should be call {derivateFromPrivate} function 1 time`, () => {
                        assert.strictEqual(spy.callCount, 1)
                    })

                    it(`should be call {derivateFromPrivate} function with following args 
          ['tpubDDKfVnzua2kP98tAvXvU3t9sZkk6AmMgaPH1nGQNM1ePyKzNFwZ9EUsFojY6sxGVxtcGe1vw96yUtufVFhVTVccnDumXUcpZ2jvzv95x3aR',
          { limit: 1, skip: 1 }]`, () => {
                        assert.deepEqual(spy.args[0], [
                            'tpubDDKfVnzua2kP98tAvXvU3t9sZkk6AmMgaPH1nGQNM1ePyKzNFwZ9EUsFojY6sxGVxtcGe1vw96yUtufVFhVTVccnDumXUcpZ2jvzv95x3aR',
                            { limit: 1, skip: 1 },
                        ])
                    })
                })
            })

            context('with seedPhrase', () => {
                let spy
                let actual
                before(done => {
                    spy = sinon.spy(Dogecoin.prototype, 'derivateFromPrivate')
                    const cursor = {
                        skip: 1,
                        limit: 1,
                    }
                    /**
                     * Generated by: https://iancoleman.io/bip39/
                     */
                    const seedPhrase = {
                        seedPhrase:
                            'ankle aware swing truth labor reject enter effort twelve virtual execute double',
                    }
                    actual = instanceWithTestnet.derivateKeys(
                        seedPhrase,
                        cursor,
                    )
                    done()
                })
                after((done): void => {
                    sinon.restore()
                    done()
                })
                context('positive result', () => {
                    const expected: [
                        {
                            path: string
                            address: string
                            publicKey: string
                            privateKey: string
                        },
                    ] = [
                        {
                            path: "m/44'/1'/0'/0/2",
                            address: 'nd7k9YnyYqjFFf2UXUdPZsFVh3vh4jqUYK',
                            publicKey:
                                '038f3974bb9ee23d8cb55a6f6e15d3be58693b1348699e459e229d07f31825ab40',
                            privateKey:
                                'chPVs597uAbAm4sGJT1WxoGfQJfx3pCwNkMHtvjYuhQmwHEoDQop',
                        },
                    ]
                    it(`should be return correct ${expected[0]['path']} path`, () => {
                        assert.strictEqual(
                            actual[0]['path'],
                            expected[0]['path'],
                        )
                    })

                    it(`should be return correct ${expected[0]['address']} address`, () => {
                        assert.strictEqual(
                            actual[0]['address'],
                            expected[0]['address'],
                        )
                    })

                    it(`should be return correct ${expected[0]['publicKey']} publicKey`, () => {
                        assert.strictEqual(
                            actual[0]['publicKey'],
                            expected[0]['publicKey'],
                        )
                    })

                    it(`should be return correct ${expected[0]['privateKey']} privateKey`, () => {
                        assert.strictEqual(
                            actual[0]['privateKey'],
                            expected[0]['privateKey'],
                        )
                    })

                    it(`should be call {derivateFromPrivate} function 1 time`, () => {
                        assert.strictEqual(spy.callCount, 1)
                    })

                    it(`should be call {derivateFromPrivate} function with following args 
          ['tprv8gddMNxfRf4iFfrP2tFseUVkzjEA1SAn15gEVkN4vjr18qjbdYjZ3zFPdbmh7TJxeE7WH6TPHEGiys945UqpEsidg8y4GkKjMRnqWPRw4aj',
          { limit: 1, skip: 1 }]`, () => {
                        assert.deepEqual(spy.args[0], [
                            'tprv8gddMNxfRf4iFfrP2tFseUVkzjEA1SAn15gEVkN4vjr18qjbdYjZ3zFPdbmh7TJxeE7WH6TPHEGiys945UqpEsidg8y4GkKjMRnqWPRw4aj',
                            { limit: 1, skip: 1 },
                        ])
                    })
                })
            })
        })
    })

    describe('#derivateKeys/errorHandling', () => {
        context('with testnet network', () => {
            const cursor = {
                skip: 1,
                limit: 1,
            }
            const masterPrivateKey = {
                masterPrivateKey:
                    'tprv8gddMNxfRf4iFfrP2tFseUVkzjEA1SAn15gEVkN4vjr18qjbdYjZ3zFPdbmh7TJxeE7WH6TPHEGiys945UqpEsidg8y4GkKjMRnqWPRw4aj',
            }
            try {
                instanceWithTestnet.derivateKeys(
                    { masterPrivateKey: 'invalidKey' },
                    cursor,
                ) // check behavior in case of non-base58 charackter
            } catch (ex) {
                it('should be throw an error with following message `Non-base58 character`', () => {
                    assert.strictEqual(ex.message, 'Non-base58 character')
                })
            }
            try {
                cursor.limit = -1
                instanceWithTestnet.derivateKeys(masterPrivateKey, cursor) // check behavior in case of negative limit
            } catch (ex) {
                it('should be throw an error with following message `Limit must be greater than zero`', () => {
                    assert.strictEqual(
                        ex.message,
                        'Limit must be greater than zero',
                    )
                })
            }
            try {
                cursor.limit = 1
                // Use Extended private key for ensuring properly error handling
                masterPrivateKey.masterPrivateKey =
                    'tprv8hUnabnLfGxStWqjEw16FUUfKAywkFPpg7Pn2gVgr5RC3akBCyfLocVE1wPXis6GfiZwTgJYNANwcPnfyJR4VFXaGfVHxsWX4nSzYJAeZgR'
                instanceWithTestnet.derivateKeys(masterPrivateKey, cursor) // check behavior in case of negative limit
            } catch (ex) {
                it('should be throw an error with following message `Expected master, got child`', () => {
                    assert.strictEqual(ex.message, 'Expected master, got child')
                })
            }
        })
    })

    describe('#sign', () => {
        /*
        context('with mainnet network', async () => {
            const privateKey =
                'T5KAL3bY2BYSoT88UnHiVcKqrqku7wM9WuwGLXV5DiSSWfRGXUNz'
            const actual = await instance.sign('fake_data', privateKey, false)
            it('should be return `418b0dd60b32af679df67f781d3f9a3e17c1def9d7fb9408757aec0bbac77f5700de784ca57c99ab296991d831902536e6af171efe9cd83dfa539c600fed7c11`', () => {
                assert.strictEqual(
                    actual,
                    '418b0dd60b32af679df67f781d3f9a3e17c1def9d7fb9408757aec0bbac77f5700de784ca57c99ab296991d831902536e6af171efe9cd83dfa539c600fed7c11',
                )
            })
            try {
                await instance.sign('fake_data', 'Invalid_Private_Key', false) // check behavior in case of invalid private Key
            } catch (ex) {
                it('should be throw an error with following message `Non-base58 character`', () => {
                    assert.strictEqual(ex.message, 'Non-base58 character')
                })
            }
        })

         */
        context('with testnet network', async () => {
            const privateKey =
                'chPVs597uAbAm4sGJT1WxoGfQJfx3pCwNkMHtvjYuhQmwHEoDQop'
            const actual = await instanceWithTestnet.sign(
                'fake_data',
                privateKey,
                false,
            )

            it('should be return `b5a3ac9dfe56c43eee618b0997c8ac94d55b602e92e47ebfa40d38efeb25273d3361fe8ad14488642be1d6f7de1347cc4ae64695980d116b986aa3f213372004`', () => {
                assert.strictEqual(
                    actual,
                    'b5a3ac9dfe56c43eee618b0997c8ac94d55b602e92e47ebfa40d38efeb25273d3361fe8ad14488642be1d6f7de1347cc4ae64695980d116b986aa3f213372004',
                )
            })
            try {
                await instanceWithTestnet.sign(
                    'fake_data',
                    'Invalid_Private_Key',
                    false,
                ) // check behavior in case of invalid private Key
            } catch (ex) {
                it('should be throw an error with following message `Non-base58 character`', () => {
                    assert.strictEqual(ex.message, 'Non-base58 character')
                })
            }
        })
    })

    describe('#getPublicFromPrivate', () => {
        /*
        context('with mainnet network', () => {
            const privateKey =
                'T5KAL3bY2BYSoT88UnHiVcKqrqku7wM9WuwGLXV5DiSSWfRGXUNz'
            const actual = instance.getPublicFromPrivate(privateKey)
            it(`should be return 022c26bc8fc69a773a61660cfbf463955a622c44db6fcc54fadbc08c1d5dbfe3ce`, () => {
                assert.strictEqual(
                    actual,
                    '022c26bc8fc69a773a61660cfbf463955a622c44db6fcc54fadbc08c1d5dbfe3ce',
                )
            })
            try {
                instance.getPublicFromPrivate('Invalid_Private_Key') // check behavior in case of invalid private Key
            } catch (ex) {
                it('should be throw an error with following message `Non-base58 character`', () => {
                    assert.strictEqual(ex.message, 'Non-base58 character')
                })
            }
        })
        */
        context('with testnet network', () => {
            const privateKey =
                'ciUNHyb9LrggdwfennqTKR6ZhK1bmGAyeNb6dXYCjS2hJwXkbcCQ'
            const actual = instanceWithTestnet.getPublicFromPrivate(privateKey)
            it(`should be return 031f3d053b7b43087f35e92e5b37134844e0b45055ee945f880a7e2699280f04cf`, () => {
                assert.strictEqual(
                    actual,
                    '031f3d053b7b43087f35e92e5b37134844e0b45055ee945f880a7e2699280f04cf',
                )
            })
            try {
                instanceWithTestnet.getPublicFromPrivate('Invalid_Private_Key') // check behavior in case of invalid private Key
            } catch (ex) {
                it('should be throw an error with following message `Non-base58 character`', () => {
                    assert.strictEqual(ex.message, 'Non-base58 character')
                })
            }
        })
    })

    describe('#getAddressFromPublic', () => {
        /*
            describe('with mainnet network', () => {
                const publicKey =
                    '022c26bc8fc69a773a61660cfbf463955a622c44db6fcc54fadbc08c1d5dbfe3ce'
                context('Without specifing format', () => {
                    const actual = instance.getAddressFromPublic(publicKey)
                    it(`should be return LbYDGDVhLXer4YQCmjaEYBeMQUrwYdYdyM`, () => {
                        assert.strictEqual(
                            actual,
                            'LbYDGDVhLXer4YQCmjaEYBeMQUrwYdYdyM',
                        )
                    })
                    try {
                        instance.getAddressFromPublic('Invalid_Public_Key') // check behavior in case of invalid public Key
                    } catch (ex) {
                        it('should be throw an error with following message `Expected property "pubkey" of type ?isPoint, got Buffer`', () => {
                            assert.strictEqual(
                                ex.message,
                                'Expected property "pubkey" of type ?isPoint, got Buffer',
                            )
                        })
                    }
                })
                context('With bech32 format', () => {
                    const actual = instance.getAddressFromPublic(
                        publicKey,
                        'bech32',
                    )
                    it(`should be return ltc1qktmq2uwmt2shqlrz334jva35fhtvcpffrmlluq`, () => {
                        assert.strictEqual(
                            actual,
                            'ltc1qktmq2uwmt2shqlrz334jva35fhtvcpffrmlluq',
                        )
                    })
                })
                context('Without invalid format', () => {
                    const actual = instance.getAddressFromPublic(
                        publicKey,
                        'invalid',
                    )
                    it(`should be return LbYDGDVhLXer4YQCmjaEYBeMQUrwYdYdyM`, () => {
                        assert.strictEqual(
                            actual,
                            'LbYDGDVhLXer4YQCmjaEYBeMQUrwYdYdyM',
                        )
                    })
                })
            })
        */
        describe('with testnet network', () => {
            const publicKey =
                '031f3d053b7b43087f35e92e5b37134844e0b45055ee945f880a7e2699280f04cf'
            context('Without specifing format', () => {
                const actual = instanceWithTestnet.getAddressFromPublic(
                    publicKey,
                )
                it(`should be return nbctA9Rk5YKfzhPRjt84sUGiHdsgFjiqDK`, () => {
                    assert.strictEqual(
                        actual,
                        'nbctA9Rk5YKfzhPRjt84sUGiHdsgFjiqDK',
                    )
                })
                try {
                    instanceWithTestnet.getAddressFromPublic(
                        'Invalid_Public_Key',
                    ) // check behavior in case of invalid public Key
                } catch (ex) {
                    it('should be throw an error with following message `Expected property "pubkey" of type ?isPoint, got Buffer`', () => {
                        assert.strictEqual(
                            ex.message,
                            'Expected property "pubkey" of type ?isPoint, got Buffer',
                        )
                    })
                }
            })
            context('With bech32 format', () => {
                const actual = instanceWithTestnet.getAddressFromPublic(
                    publicKey,
                    'bech32',
                )
                it(`should be return xdg1q296at5hrqvqf2m42vn5jltxzc6tmuw06gmprer`, () => {
                    assert.strictEqual(
                        actual,
                        'xdg1q296at5hrqvqf2m42vn5jltxzc6tmuw06gmprer',
                    )
                })
            })
            context('Without invalid format', () => {
                const actual = instanceWithTestnet.getAddressFromPublic(
                    publicKey,
                    'invalid',
                )
                it(`should be return nbctA9Rk5YKfzhPRjt84sUGiHdsgFjiqDK`, () => {
                    assert.strictEqual(
                        actual,
                        'nbctA9Rk5YKfzhPRjt84sUGiHdsgFjiqDK',
                    )
                })
            })
        })
    })

    describe('#checkSign', () => {
        /*
        context('with mainnet network', () => {
            const actual = instance.checkSign(
                '022c26bc8fc69a773a61660cfbf463955a622c44db6fcc54fadbc08c1d5dbfe3ce',
                'fake_data',
                '418b0dd60b32af679df67f781d3f9a3e17c1def9d7fb9408757aec0bbac77f5700de784ca57c99ab296991d831902536e6af171efe9cd83dfa539c600fed7c11',
            )
            it('should be return `true`', () => {
                assert.strictEqual(actual, true)
            })
            try {
                instance.checkSign(
                    '022c26bc8fc69a773a61660cfbf463955a622c44db6fcc54fadbc08c1d5dbfe3ce',
                    'fake_data',
                    'invalid_sign',
                )
            } catch (ex) {
                it('should be throw an error with following message `Expected Signature`', () => {
                    assert.strictEqual(ex.message, 'Expected Signature')
                })
            }
        })
        )
         */
        context('with testnet network', () => {
            const actual = instanceWithTestnet.checkSign(
                '038f3974bb9ee23d8cb55a6f6e15d3be58693b1348699e459e229d07f31825ab40',
                'fake_data',
                'b5a3ac9dfe56c43eee618b0997c8ac94d55b602e92e47ebfa40d38efeb25273d3361fe8ad14488642be1d6f7de1347cc4ae64695980d116b986aa3f213372004',
            )
            it('should be return `true`', () => {
                assert.strictEqual(actual, true)
            })
            try {
                instanceWithTestnet.checkSign(
                    '038f3974bb9ee23d8cb55a6f6e15d3be58693b1348699e459e229d07f31825ab40',
                    'fake_data',
                    'invalid_sign',
                )
            } catch (ex) {
                it('should be throw an error with following message `Expected Signature`', () => {
                    assert.strictEqual(ex.message, 'Expected Signature')
                })
            }
        })
    })

    describe('#signTx', () => {
        context('with testnet network', async () => {
            const data =
                '{"sum":"1.5e-7","fee":"0.00000452","inputs":[{"txId":"8a78b4b670a0f80fb6c02899f911282385a1b903a240edad44bbb7f40137ed84","hex":"010000000152b13c4293458642099ff60359d8109dc1700ecdb89c93e2c742668762f02559010000006b4830450221008b4d3f3198068db11d53fafc281062c94bdd2d98ff780f4edb46532697c1ee7b02201fa64932f2a6e8b69a8761458f9f93a6509ce9b4155c6e55faccebaf0be4f8010121038d74ef5a5f484ba0d8b073c190cf54c5d38206310adcd879136501fa18b020c0feffffff0270eca475010000001976a914d8fdd2d888c20dcfbf72101773a0bfb94fa49f2c88acc0a6cabc120400001976a9146c501b1ae6d576b50fd8d048d53202f86d7a6fac88ac56072d00","n":0,"value":"6268710000","address":"noyWHgRsXnyQ4jH8vHS5ink28DNGNcvzak","type":"pubkeyhash","scriptPubKeyHex":"76a914d8fdd2d888c20dcfbf72101773a0bfb94fa49f2c88ac"}],"outputs":[{"address":"niAb6eaM2eLaFehN4gShpQcEneWijMwfNu","amount":"15"},{"address":"noyWHgRsXnyQ4jH8vHS5ink28DNGNcvzak","amount":"6268709533"}]}'
            const privateKey =
                '{"noyWHgRsXnyQ4jH8vHS5ink28DNGNcvzak":"cmpTyzrNexmW8PWkPhUv9V5Tj2QJBMdteuV4oJLYTNehi6nWjDGT"}'

            const actual = await instanceWithTestnet.sign(
                data,
                privateKey,
                true,
            )

            it('should be return `020000000184ed3701f4b7bb44aded40a203b9a185232811f99928c0b60ff8a070b6b4788a000000006a473044022048acafdfb21290ca1e665b3163be665d565f18d7338175f701e6d4379a0f3ce0022000dec59cbba58041181f14dfccc03f308d5e198f2ebf6afbcebe58a04bd93cfb01210367edee9822a43741be3f21aa058c39037225d2199fb5f2403672e5b34e9dc656ffffffff020f000000000000001976a9149945a8d5765ae06c89f7992e26cd7d0a8cbc6d5888ac9deaa475010000001976a914d8fdd2d888c20dcfbf72101773a0bfb94fa49f2c88ac00000000`', () => {
                assert.strictEqual(
                    actual,
                    '020000000184ed3701f4b7bb44aded40a203b9a185232811f99928c0b60ff8a070b6b4788a000000006a473044022048acafdfb21290ca1e665b3163be665d565f18d7338175f701e6d4379a0f3ce0022000dec59cbba58041181f14dfccc03f308d5e198f2ebf6afbcebe58a04bd93cfb01210367edee9822a43741be3f21aa058c39037225d2199fb5f2403672e5b34e9dc656ffffffff020f000000000000001976a9149945a8d5765ae06c89f7992e26cd7d0a8cbc6d5888ac9deaa475010000001976a914d8fdd2d888c20dcfbf72101773a0bfb94fa49f2c88ac00000000',
                )
            })
            try {
                await instanceWithTestnet.sign(
                    data,
                    '{"noyWHgRsXnyQ4jH8vHS5ink28DNGNcvzak":"ali32142"}',
                    true,
                ) // check behavior in case of invalid private Key
            } catch (ex) {
                it('should be throw an error with following message `Non-base58 character`', () => {
                    assert.strictEqual(ex.message, 'Non-base58 character')
                })
            }
        })
    })
})
