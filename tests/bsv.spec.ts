/**
 * source: https://github.com/bitcoinjs/bitcoinjs-lib/
 */
import * as assert from 'assert'
import * as sinon from 'sinon'
import { describe, it, after, before } from 'mocha'
import { Keys, Network, Blockchain } from '../src'
import {
    BitcoinSV,
    TransactionForSign,
    UnsignedInput,
    UnsignedOutput,
} from '../src/blockchains/bitcoinsv'
import { createScript } from 'bitcoinjs-lib'

describe('Lib/BitcoinSV', () => {
    const instance = new Keys(Blockchain.BITCOIN_SV, Network.MAINNET)
    const instanceWithTestnet = new Keys(Blockchain.BITCOIN_SV, Network.TESTNET)

    it('signs transaction', async () => {
        const inputs: UnsignedInput[] = [
            {
                txId:
                    '830c60052e973fd9285538286d1975cecdc8162741210fd2a5562f66a90cabba',
                address: 'mhH8jpeMU5PQNmh9HxfZwPoXBUfzX2pdns',
                sum: '100000',
                scriptPubKeyHex: createScript(
                    'mhH8jpeMU5PQNmh9HxfZwPoXBUfzX2pdns',
                ),
            },
        ]
        const outputs: UnsignedOutput[] = [
            {
                amount: '1000',
                address: 'mkLBdMnCDPZNEc9rAfEdGsEq2RXfsugVsM',
            },
            {
                amount: '99000',
                address: 'mhH8jpeMU5PQNmh9HxfZwPoXBUfzX2pdns',
            },
        ]
        const transaction: TransactionForSign = {
            sum: '1000',
            fee: '0',
            inputs,
            outputs,
        }
        const keysMap = {
            mhH8jpeMU5PQNmh9HxfZwPoXBUfzX2pdns:
                'L1TEPywcahgr4hkBzusXKQ5D82zsE3iKvE25fLkaSisda63ePfMp',
        }
        const bsv = new BitcoinSV(Network.TESTNET)
        const hash = await bsv.sign(
            JSON.stringify(transaction),
            JSON.stringify(keysMap),
        )
        assert.strictEqual(
            hash,
            '0100000001baab0ca9662f56a5d20f21412716c8cdce75196d2838' +
                '5528d93f972e05600c83000000006b483045022100a76ce1cdbba56050284d1' +
                '136e6b3d34644b0a9e06e54fe74d69970920c82ff1802201f041c7cb2e4d9f0' +
                'c8d808b31524fa23da85e7c586cb21ead60142d88ccba994412103bff3ef827' +
                'b2ba9a881125dbffb6ffce8556e9d38394e3dcf8fdfc66dd016ac30ffffffff' +
                '02e8030000000000001976a91434cf2edb9af034dcbdf8920d7df75e15e7246' +
                '44b88acb8820100000000001976a914135325843306e2bda31d15000a4bd56a' +
                '8b61c1b088ac00000000',
        )
    })

    describe('#getDataFromSeed/generateSeedPhrase', () => {
        const seed = instance.generateSeedPhrase(12)
        const actual = instance.getDataFromSeed(seed['seedPhrase'])
        it(`should be return \`${seed['seedPhrase']}\` seedPhrase`, () => {
            assert.strictEqual(actual['seedPhrase'], seed['seedPhrase'])
        })

        it(`should be return \`${seed['masterPublicKey']}\` masterPublicKey`, () => {
            assert.strictEqual(
                actual['masterPublicKey'],
                seed['masterPublicKey'],
            )
        })

        it(`should be return \`${seed['masterPrivateKey']}\ masterPrivateKey`, () => {
            assert.strictEqual(
                actual['masterPrivateKey'],
                seed['masterPrivateKey'],
            )
        })
    })

    describe('#getDefaultPaths', () => {
        const actualPaths = instance.getDefaultPaths()
        it('should return exact paths', () => {
            const expectedPaths = [
                {
                    blockchain: 'bitcoin_sv',
                    network: 'mainnet',
                    path: "m/44'/236'/0'/0/0",
                },
                {
                    blockchain: 'bitcoin_sv',
                    network: 'testnet',
                    path: "m/44'/1'/0'/0/0",
                },
            ]
            assert.deepEqual(actualPaths, expectedPaths)
        })
    })

    describe('#checkSeedPhrase', () => {
        const seedPhrase =
            'quiz skirt rail empower fruit habit narrow address mind harbor quiz verb'
        const actualPositive: boolean | Error = instance.checkSeedPhrase(
            seedPhrase,
        )
        it('should return `true`', () => {
            assert.strictEqual(actualPositive, true)
        })
        const actualNegative: boolean | Error = instance.checkSeedPhrase(
            'invalid',
        )
        it('should return `false`', () => {
            assert.strictEqual(actualNegative, false)
        })
    })

    describe('#derivateKeys', () => {
        context('with mainnet network', () => {
            context('with masterPrivateKey', () => {
                let spy
                let actual
                before(done => {
                    spy = sinon.spy(BitcoinSV.prototype, 'derivateFromPrivate')
                    const cursor = {
                        skip: 1,
                        limit: 1,
                    }
                    /**
                     * Generated by: https://iancoleman.io/bip39/
                     */
                    const masterPrivateKey = {
                        masterPrivateKey:
                            'xprv9s21ZrQH143K3bESDm6VzuysGU5SE5SasdExKzL6PvBAJGwHFPVL6THi8PxG994bdmLedRGj2abd5BuLzaWvGVounBsFwmqPGiGpcygApuP',
                    }
                    actual = instance.derivateKeys(masterPrivateKey, cursor)
                    done()
                })
                after((done): void => {
                    sinon.restore()
                    done()
                })
                context('positive result', () => {
                    const expected: [
                        {
                            path: string
                            address: string
                            publicKey: string
                            privateKey: string
                        },
                    ] = [
                        {
                            path: "m/44'/236'/0'/0/2",
                            address: '15hhhQ9hiy8p4evXpT2BwZZ7W7i65T19MV',
                            publicKey:
                                '0382097c4888ac330e7248e96bd45a180d03525b0d69a0cb46fdfd4070a7d2ea77',
                            privateKey:
                                'L5iKsuPCE27Gq1HpztakBmM6ACUyuh4tRV4Vd92EMvaRoLWwN2w2',
                        },
                    ]
                    it(`should be return correct ${expected[0]['path']} path`, () => {
                        assert.strictEqual(
                            actual[0]['path'],
                            expected[0]['path'],
                        )
                    })

                    it(`should be return correct ${expected[0]['address']} address`, () => {
                        assert.strictEqual(
                            actual[0]['address'],
                            expected[0]['address'],
                        )
                    })

                    it(`should be return correct ${expected[0]['publicKey']} publicKey`, () => {
                        assert.strictEqual(
                            actual[0]['publicKey'],
                            expected[0]['publicKey'],
                        )
                    })

                    it(`should be return correct ${expected[0]['privateKey']} privateKey`, () => {
                        assert.strictEqual(
                            actual[0]['privateKey'],
                            expected[0]['privateKey'],
                        )
                    })

                    it(`should be call {derivateFromPrivate} function 1 time`, () => {
                        assert.strictEqual(spy.callCount, 1)
                    })

                    it(`should be call {derivateFromPrivate} function with following args 
              ['xprv9s21ZrQH143K3bESDm6VzuysGU5SE5SasdExKzL6PvBAJGwHFPVL6THi8PxG994bdmLedRGj2abd5BuLzaWvGVounBsFwmqPGiGpcygApuP',
              { limit: 1, skip: 1 }]`, () => {
                        assert.deepEqual(spy.args[0], [
                            'xprv9s21ZrQH143K3bESDm6VzuysGU5SE5SasdExKzL6PvBAJGwHFPVL6THi8PxG994bdmLedRGj2abd5BuLzaWvGVounBsFwmqPGiGpcygApuP',
                            { limit: 1, skip: 1 },
                        ])
                    })
                })
            })
            context('with masterPublicKey', () => {
                let spy
                let actual
                before(done => {
                    spy = sinon.spy(BitcoinSV.prototype, 'derivateFromPublic')
                    const cursor = {
                        skip: 1,
                        limit: 1,
                    }
                    const masterPublicKey = {
                        masterPublicKey:
                            'xpub661MyMwAqRbcFkod8bRLkBLEpxJuHD1jdsLwzn2PsPLxs3YtAjyKPHFp4m4EssQC9aQNWymqLeKyhELT8MFKQFZgv8VBdrdVod1r9NtESMP',
                    }
                    actual = instance.derivateKeys(masterPublicKey, cursor)
                    done()
                })
                after((done): void => {
                    sinon.restore()
                    done()
                })
                context('positive result', () => {
                    const expected: [
                        { path: string; address: string; publicKey: string },
                    ] = [
                        {
                            path: "m/44'/236'/0'/0/2",
                            address: '14UQMUzbNPKqFjEeox5UGESLry3FK9catx',
                            publicKey:
                                '03589ba6d047be9acf960f3a204be09f288245768db2de3dd62704fe24730b5ebf',
                        },
                    ]
                    it(`should be return correct ${expected[0]['path']} path`, () => {
                        assert.strictEqual(
                            actual[0]['path'],
                            expected[0]['path'],
                        )
                    })

                    it(`should be return correct ${expected[0]['address']} address`, () => {
                        assert.strictEqual(
                            actual[0]['address'],
                            expected[0]['address'],
                        )
                    })

                    it(`should be return correct ${expected[0]['publicKey']} publicKey`, () => {
                        assert.strictEqual(
                            actual[0]['publicKey'],
                            expected[0]['publicKey'],
                        )
                    })

                    it(`should be call {derivateFromPublic} function 1 time`, () => {
                        assert.strictEqual(spy.callCount, 1)
                    })

                    it(`should be call {derivateFromPublic} function with following args 
              ['xpub661MyMwAqRbcFkod8bRLkBLEpxJuHD1jdsLwzn2PsPLxs3YtAjyKPHFp4m4EssQC9aQNWymqLeKyhELT8MFKQFZgv8VBdrdVod1r9NtESMP',
              { limit: 1, skip: 1 }]`, () => {
                        assert.deepEqual(spy.args[0], [
                            'xpub661MyMwAqRbcFkod8bRLkBLEpxJuHD1jdsLwzn2PsPLxs3YtAjyKPHFp4m4EssQC9aQNWymqLeKyhELT8MFKQFZgv8VBdrdVod1r9NtESMP',
                            { limit: 1, skip: 1 },
                        ])
                    })
                })
            })
            context('with seedPhrase', () => {
                let spy
                let actual
                before(done => {
                    spy = sinon.spy(BitcoinSV.prototype, 'derivateFromPrivate')
                    const cursor = {
                        skip: 1,
                        limit: 1,
                    }
                    const seedPhrase = {
                        seedPhrase:
                            'gossip that property quit spy emerge electric lazy twist couch phrase capable',
                    }
                    actual = instance.derivateKeys(seedPhrase, cursor)
                    done()
                })
                after((done): void => {
                    sinon.restore()
                    done()
                })
                context('positive result', () => {
                    const expected: [
                        {
                            path: string
                            address: string
                            publicKey: string
                            privateKey: string
                        },
                    ] = [
                        {
                            path: "m/44'/236'/0'/0/2",
                            address: '1G2ioroh7xWkDnfAQXG6xDTx4nmosmB3Ye',
                            publicKey:
                                '027823acf3b6bc74a8de81a0f8a0f9f76bb10c47a70bc3a268e29ee0b3c8bbc40e',
                            privateKey:
                                'KwYBu6woqHQeiBMx6194c9AVhL8hKgpxcoNEsSLmRDbUM8wkkZuP',
                        },
                    ]
                    it(`should be return correct ${expected[0]['path']} path`, () => {
                        assert.strictEqual(
                            actual[0]['path'],
                            expected[0]['path'],
                        )
                    })

                    it(`should be return correct ${expected[0]['address']} address`, () => {
                        assert.strictEqual(
                            actual[0]['address'],
                            expected[0]['address'],
                        )
                    })

                    it(`should be return correct ${expected[0]['publicKey']} publicKey`, () => {
                        assert.strictEqual(
                            actual[0]['publicKey'],
                            expected[0]['publicKey'],
                        )
                    })

                    it(`should be return correct ${expected[0]['privateKey']} privateKey`, () => {
                        assert.strictEqual(
                            actual[0]['privateKey'],
                            expected[0]['privateKey'],
                        )
                    })

                    it(`should be call {derivateFromPrivate} function 1 time`, () => {
                        assert.strictEqual(spy.callCount, 1)
                    })

                    it(`should be call {derivateFromPrivate} function with following args 
              ['xprv9zKMDeW4JBMDocjvoXoVpnaTaZ59KuaEUZ7C1iWBevUWK8hDdj2fqhpxKJKHULaWoFhhmUVyfyxzivqGKrZHHRt6k51hRFzxSZy2jxSniSU',
              { limit: 1, skip: 1 }]`, () => {
                        assert.deepEqual(spy.args[0], [
                            'xprv9zKMDeW4JBMDocjvoXoVpnaTaZ59KuaEUZ7C1iWBevUWK8hDdj2fqhpxKJKHULaWoFhhmUVyfyxzivqGKrZHHRt6k51hRFzxSZy2jxSniSU',
                            { limit: 1, skip: 1 },
                        ])
                    })
                })
            })
        })
        context('with testnet network', () => {
            context('with masterPrivateKey', () => {
                let spy
                let actual
                before(done => {
                    spy = sinon.spy(BitcoinSV.prototype, 'derivateFromPrivate')
                    const cursor = {
                        skip: 1,
                        limit: 1,
                    }
                    /**
                     * Generated By: https://iancoleman.io/bip39/
                     */
                    const masterPrivateKey = {
                        masterPrivateKey:
                            'tprv8ZgxMBicQKsPdnHse7r5kbsbLJWKiZeym81SAXHLvZ6CJoE9XtH8yHWMC8xJVaVSihoTXG1mMoC3wL9FVvyZ59b8WQu8HkySy8gWFbMobLJ',
                    }
                    actual = instanceWithTestnet.derivateKeys(
                        masterPrivateKey,
                        cursor,
                    )
                    done()
                })
                after((done): void => {
                    sinon.restore()
                    done()
                })
                context('positive result', () => {
                    const expected: [
                        {
                            path: string
                            address: string
                            publicKey: string
                            privateKey: string
                        },
                    ] = [
                        {
                            path: "m/44'/1'/0'/0/2",
                            address: 'mjPn5L3PQY48MQrLezjfMUrdnshdnAiLXF',
                            publicKey:
                                '038ae54b5a649cb2415a8e4896a74dfb5021c6e8796776b0d7dab710529fb18911',
                            privateKey:
                                'L5ZCb3zSy5g1R6YewWAWfz3nxH7kZkmtkQh5XLwJReCVri2MB85T',
                        },
                    ]
                    it(`should be return correct ${expected[0]['path']} path`, () => {
                        assert.strictEqual(
                            actual[0]['path'],
                            expected[0]['path'],
                        )
                    })

                    it(`should be return correct ${expected[0]['address']} address`, () => {
                        assert.strictEqual(
                            actual[0]['address'],
                            expected[0]['address'],
                        )
                    })

                    it(`should be return correct ${expected[0]['publicKey']} publicKey`, () => {
                        assert.strictEqual(
                            actual[0]['publicKey'],
                            expected[0]['publicKey'],
                        )
                    })

                    it(`should be return correct ${expected[0]['privateKey']} privateKey`, () => {
                        assert.strictEqual(
                            actual[0]['privateKey'],
                            expected[0]['privateKey'],
                        )
                    })

                    it(`should be call {derivateFromPrivate} function 1 time`, () => {
                        assert.strictEqual(spy.callCount, 1)
                    })

                    it(`should be call {derivateFromPrivate} function with following args 
              ['tprv8ZgxMBicQKsPdnHse7r5kbsbLJWKiZeym81SAXHLvZ6CJoE9XtH8yHWMC8xJVaVSihoTXG1mMoC3wL9FVvyZ59b8WQu8HkySy8gWFbMobLJ',
              { limit: 1, skip: 1 }]`, () => {
                        assert.deepEqual(spy.args[0], [
                            'tprv8ZgxMBicQKsPdnHse7r5kbsbLJWKiZeym81SAXHLvZ6CJoE9XtH8yHWMC8xJVaVSihoTXG1mMoC3wL9FVvyZ59b8WQu8HkySy8gWFbMobLJ',
                            { limit: 1, skip: 1 },
                        ])
                    })
                })
            })
            context('with masterPublicKey', () => {
                let spy
                let actual
                before(done => {
                    spy = sinon.spy(BitcoinSV.prototype, 'derivateFromPublic')
                    const cursor = {
                        skip: 1,
                        limit: 1,
                    }
                    /**
                     * Generated By: https://iancoleman.io/bip39/
                     */
                    const masterPublicKey = {
                        masterPublicKey:
                            'tpubDG4hzHBhdZFnFV6KGpqDgQRj9gntid7QGSEhsLyQ3Ltn6qAB31vh8fAZVtSubfVCcnCiagzUqVVzE8gjAgY2xxcQN3W9T7gCqD9ZfEKdjpq',
                    }
                    actual = instanceWithTestnet.derivateKeys(
                        masterPublicKey,
                        cursor,
                    )
                    done()
                })
                after((done): void => {
                    sinon.restore()
                    done()
                })
                context('positive result', () => {
                    const expected: [
                        { path: string; address: string; publicKey: string },
                    ] = [
                        {
                            path: "m/44'/1'/0'/0/2",
                            address: 'n1RD7wp7uzpVLF1Pc5Q2LNNP8u2ojZ1V3y',
                            publicKey:
                                '036a4272805d87fba72df0779278d80281dc1e7019e466f19e4408112432ed95d8',
                        },
                    ]
                    it(`should be return correct ${expected[0]['path']} path`, () => {
                        assert.strictEqual(
                            actual[0]['path'],
                            expected[0]['path'],
                        )
                    })

                    it(`should be return correct ${expected[0]['address']} address`, () => {
                        assert.strictEqual(
                            actual[0]['address'],
                            expected[0]['address'],
                        )
                    })

                    it(`should be return correct ${expected[0]['publicKey']} publicKey`, () => {
                        assert.strictEqual(
                            actual[0]['publicKey'],
                            expected[0]['publicKey'],
                        )
                    })

                    it(`should be call {derivateFromPublic} function 1 time`, () => {
                        assert.strictEqual(spy.callCount, 1)
                    })

                    it(`should be call {derivateFromPublic} function with following args 
              ['tpubDG4hzHBhdZFnFV6KGpqDgQRj9gntid7QGSEhsLyQ3Ltn6qAB31vh8fAZVtSubfVCcnCiagzUqVVzE8gjAgY2xxcQN3W9T7gCqD9ZfEKdjpq',
              { limit: 1, skip: 1 }]`, () => {
                        assert.deepEqual(spy.args[0], [
                            'tpubDG4hzHBhdZFnFV6KGpqDgQRj9gntid7QGSEhsLyQ3Ltn6qAB31vh8fAZVtSubfVCcnCiagzUqVVzE8gjAgY2xxcQN3W9T7gCqD9ZfEKdjpq',
                            { limit: 1, skip: 1 },
                        ])
                    })
                })
            })
            context('with seedPhrase', () => {
                let spy
                let actual
                before(done => {
                    spy = sinon.spy(BitcoinSV.prototype, 'derivateFromPrivate')
                    const cursor = {
                        skip: 1,
                        limit: 1,
                    }
                    /**
                     * Generated by: https://iancoleman.io/bip39/
                     */
                    const seedPhrase = {
                        seedPhrase:
                            'include gas swallow valve dignity candy dragon voice member concert planet mutual dutch reform push',
                    }
                    actual = instanceWithTestnet.derivateKeys(
                        seedPhrase,
                        cursor,
                    )
                    done()
                })
                after((done): void => {
                    sinon.restore()
                    done()
                })
                context('positive result', () => {
                    const expected: [
                        {
                            path: string
                            address: string
                            publicKey: string
                            privateKey: string
                        },
                    ] = [
                        {
                            path: "m/44'/1'/0'/0/2",
                            address: 'mzP9atortKF87N4LRzTNuYqm4WWdJevz7f',
                            publicKey:
                                '02d7d7b4ed62a982c6bcdb8146230f9b92d4bd3a8136faaec49fbf8750261d82b7',
                            privateKey:
                                'L5HbYe7sDS7Cu8e49yoCKcopAcXRD4p3Wciqke2BCeE9XCbmxtnj',
                        },
                    ]
                    it(`should be return correct ${expected[0]['path']} path`, () => {
                        assert.strictEqual(
                            actual[0]['path'],
                            expected[0]['path'],
                        )
                    })

                    it(`should be return correct ${expected[0]['address']} address`, () => {
                        assert.strictEqual(
                            actual[0]['address'],
                            expected[0]['address'],
                        )
                    })

                    it(`should be return correct ${expected[0]['publicKey']} publicKey`, () => {
                        assert.strictEqual(
                            actual[0]['publicKey'],
                            expected[0]['publicKey'],
                        )
                    })

                    it(`should be return correct ${expected[0]['privateKey']} privateKey`, () => {
                        assert.strictEqual(
                            actual[0]['privateKey'],
                            expected[0]['privateKey'],
                        )
                    })

                    it(`should be call {derivateFromPrivate} function 1 time`, () => {
                        assert.strictEqual(spy.callCount, 1)
                    })

                    it(`should be call {derivateFromPrivate} function with following args 
          ['tprv8fpHND66YGHAydYhpYhW6wPWK3ujE9WukgrUUWTG2BhQoxEXz5jziPqroBCemW4ELqksHU9YHCyFGinsS2KGiNG2Rtxo19gYrtDsiYPXtTb',
          { limit: 1, skip: 1 }]`, () => {
                        assert.deepEqual(spy.args[0], [
                            'tprv8fpHND66YGHAydYhpYhW6wPWK3ujE9WukgrUUWTG2BhQoxEXz5jziPqroBCemW4ELqksHU9YHCyFGinsS2KGiNG2Rtxo19gYrtDsiYPXtTb',
                            { limit: 1, skip: 1 },
                        ])
                    })
                })
            })
        })
    })

    describe('#derivateKeys/errorHandling', () => {
        const cursor = {
            skip: 1,
            limit: 1,
        }
        const masterPrivateKey = {
            masterPrivateKey:
                'xprv9s21ZrQH143K39tiX5u6qsvmLPcitnTdwKPtbErXAQEHG5an2tQbk5kMDz8F9aB4YCmCC14UvAiukX4zd59SYbCZMAfQAD9vzMHUep5X6Wi',
        }
        try {
            instance.derivateKeys({ masterPrivateKey: 'invalidKey' }, cursor) // check behavior in case of non-base58 charackter
        } catch (ex) {
            it('should be throw an error with following message `Non-base58 character`', () => {
                assert.strictEqual(ex.message, 'Non-base58 character')
            })
        }
        try {
            cursor.limit = -1
            instance.derivateKeys(masterPrivateKey, cursor) // check behavior in case of negative limit
        } catch (ex) {
            it('should be throw an error with following message `Limit must be greater than zero`', () => {
                assert.strictEqual(
                    ex.message,
                    'Limit must be greater than zero',
                )
            })
        }
    })

    /* describe('#sign', () => {
        context('with mainnet network', async () => {
            const privateKey =
                'L5iKsuPCE27Gq1HpztakBmM6ACUyuh4tRV4Vd92EMvaRoLWwN2w2'
            const actual = await instance.sign('fake_data', privateKey, false)
            it('should be return `566ac601ed26a65b05e1bb21367e83aafbd688ebceecaf222e65938a6da4a18c692c6df1a8ba3af9e49d67b57f621bab8bbeea97b1d5ced18dc252ec6f83214d`', () => {
                assert.strictEqual(
                    actual,
                    '566ac601ed26a65b05e1bb21367e83aafbd688ebceecaf222e65938a6da4a18c692c6df1a8ba3af9e49d67b57f621bab8bbeea97b1d5ced18dc252ec6f83214d',
                )
            })
            try {
                await instance.sign('fake_data', 'Invalid_Private_Key', false) // check behavior in case of invalid private Key
            } catch (ex) {
                it('should be throw an error with following message `Non-base58 character`', () => {
                    assert.strictEqual(ex.message, 'Non-base58 character')
                })
            }
        })
        context('with testnet network', async () => {
            const privateKey =
                'KxXoNWFRuNJgfk1GrHaHVBXccH9qVPsNMnjGUHKR6FR31HtcBvLk'
            const actual = await instanceWithTestnet.sign(
                'fake_data',
                privateKey,
                false,
            )
            it(`should be return 716c12a248071f782fe47212e1d8e7b729e361044213cf2a18aed5ae90c920885dbb57096312a228dedaa846896ac0e516f51d8daeb853413251a7a914541946`, () => {
                assert.strictEqual(
                    actual,
                    '716c12a248071f782fe47212e1d8e7b729e361044213cf2a18aed5ae90c920885dbb57096312a228dedaa846896ac0e516f51d8daeb853413251a7a914541946',
                )
            })
            try {
                await instanceWithTestnet.sign(
                    'fake_data',
                    'Invalid_Private_Key',
                    false,
                ) // check behavior in case of invalid private Key
            } catch (ex) {
                it('should be throw an error with following message `Non-base58 character`', () => {
                    assert.strictEqual(ex.message, 'Non-base58 character')
                })
            }
        })
    }) */

    describe('#getPublicFromPrivate', () => {
        context('with mainnet network', () => {
            const privateKey =
                'L5iKsuPCE27Gq1HpztakBmM6ACUyuh4tRV4Vd92EMvaRoLWwN2w2'
            const actual = instance.getPublicFromPrivate(privateKey)
            it(`should be return 0382097c4888ac330e7248e96bd45a180d03525b0d69a0cb46fdfd4070a7d2ea77`, () => {
                assert.strictEqual(
                    actual,
                    '0382097c4888ac330e7248e96bd45a180d03525b0d69a0cb46fdfd4070a7d2ea77',
                )
            })
            try {
                instance.getPublicFromPrivate('Invalid_Private_Key') // check behavior in case of invalid private Key
            } catch (ex) {
                it('should be throw an error with following message `Non-base58 character`', () => {
                    assert.strictEqual(ex.message, 'Non-base58 character')
                })
            }
        })
        context('with testnet network', () => {
            const privateKey =
                'KxXoNWFRuNJgfk1GrHaHVBXccH9qVPsNMnjGUHKR6FR31HtcBvLk'
            const actual = instanceWithTestnet.getPublicFromPrivate(privateKey)
            it(`should be return 024b6bcf5552d193cda04ba9d129503a6318b5bd98c1a42cdc49e0a98b53a24796`, () => {
                assert.strictEqual(
                    actual,
                    '024b6bcf5552d193cda04ba9d129503a6318b5bd98c1a42cdc49e0a98b53a24796',
                )
            })
            try {
                instanceWithTestnet.getPublicFromPrivate('Invalid_Private_Key') // check behavior in case of invalid private Key
            } catch (ex) {
                it('should be throw an error with following message `Non-base58 character`', () => {
                    assert.strictEqual(ex.message, 'Non-base58 character')
                })
            }
        })
    })

    describe('#getAddressFromPublic', () => {
        const publicKey =
            '0382097c4888ac330e7248e96bd45a180d03525b0d69a0cb46fdfd4070a7d2ea77'
        describe('with mainnet network', () => {
            context('Without specifing format', () => {
                const actual = instance.getAddressFromPublic(publicKey)
                it(`should be return 15hhhQ9hiy8p4evXpT2BwZZ7W7i65T19MV`, () => {
                    assert.strictEqual(
                        actual,
                        '15hhhQ9hiy8p4evXpT2BwZZ7W7i65T19MV',
                    )
                })
                try {
                    instance.getAddressFromPublic('Invalid_Public_Key') // check behavior in case of invalid public Key
                } catch (ex) {
                    it('should be throw an error with following message `Expected property "pubkey" of type ?isPoint, got Buffer`', () => {
                        assert.strictEqual(
                            ex.message,
                            'Expected property "pubkey" of type ?isPoint, got Buffer',
                        )
                    })
                }
            })
            context('With bech32 format', () => {
                const actual = instance.getAddressFromPublic(
                    publicKey,
                    'bech32',
                )
                it(`should be return bsv1qxwf36pt6445fczypgf3ggqveeyaez577l46jfp`, () => {
                    assert.strictEqual(
                        actual,
                        'bsv1qxwf36pt6445fczypgf3ggqveeyaez577l46jfp',
                    )
                })
                try {
                    instance.getAddressFromPublic('Invalid_Public_Key') // check behavior in case of invalid public Key
                } catch (ex) {
                    it('should be throw an error with following message `Expected property "pubkey" of type ?isPoint, got Buffer`', () => {
                        assert.strictEqual(
                            ex.message,
                            'Expected property "pubkey" of type ?isPoint, got Buffer',
                        )
                    })
                }
            })

            context('With invalid format', () => {
                const actual = instance.getAddressFromPublic(
                    publicKey,
                    'invalid',
                )
                it(`should be return 15hhhQ9hiy8p4evXpT2BwZZ7W7i65T19MV`, () => {
                    assert.strictEqual(
                        actual,
                        '15hhhQ9hiy8p4evXpT2BwZZ7W7i65T19MV',
                    )
                })
            })
        })
        describe('with testnet network', () => {
            const publicKey =
                '02c32badd397806e72c44279e673bb592394124ea28198fb0e514261a1a275229d'
            context('Without specifing format', () => {
                const actual = instanceWithTestnet.getAddressFromPublic(
                    publicKey,
                )
                it(`should be return miVbbks1Q6ai3oKXPSyTCaRUVcybHYmHQT`, () => {
                    assert.strictEqual(
                        actual,
                        'miVbbks1Q6ai3oKXPSyTCaRUVcybHYmHQT',
                    )
                })
                try {
                    instanceWithTestnet.getAddressFromPublic(
                        'Invalid_Public_Key',
                    ) // check behavior in case of invalid public Key
                } catch (ex) {
                    it('should be throw an error with following message `Expected property "pubkey" of type ?isPoint, got Buffer`', () => {
                        assert.strictEqual(
                            ex.message,
                            'Expected property "pubkey" of type ?isPoint, got Buffer',
                        )
                    })
                }
            })

            context('With bech32 format', () => {
                const actual = instanceWithTestnet.getAddressFromPublic(
                    publicKey,
                    'bech32',
                )
                it(`should be return bsvtest1qyzn2ltksd54s623q2f68qg6l5uv5qpvxzmf233`, () => {
                    assert.strictEqual(
                        actual,
                        'bsvtest1qyzn2ltksd54s623q2f68qg6l5uv5qpvxzmf233',
                    )
                })
            })

            context('With invalid format', () => {
                const actual = instanceWithTestnet.getAddressFromPublic(
                    publicKey,
                    'invalid',
                )
                it(`should be return miVbbks1Q6ai3oKXPSyTCaRUVcybHYmHQT`, () => {
                    assert.strictEqual(
                        actual,
                        'miVbbks1Q6ai3oKXPSyTCaRUVcybHYmHQT',
                    )
                })
            })
        })
    })

    describe('#checkSign', () => {
        context('with mainnet network', () => {
            const actual = instance.checkSign(
                '0382097c4888ac330e7248e96bd45a180d03525b0d69a0cb46fdfd4070a7d2ea77',
                'fake_data',
                '566ac601ed26a65b05e1bb21367e83aafbd688ebceecaf222e65938a6da4a18c692c6df1a8ba3af9e49d67b57f621bab8bbeea97b1d5ced18dc252ec6f83214d',
            )
            it('should be return `true`', () => {
                assert.strictEqual(actual, true)
            })
            try {
                instance.checkSign(
                    '037969366e07cf26ca3aa3a2a5fadb39977531209812c6309c58213e54127de467',
                    'fake_data',
                    'invalid_sign',
                )
            } catch (ex) {
                it('should be throw an error with following message `Expected Signature`', () => {
                    assert.strictEqual(ex.message, 'Expected Signature')
                })
            }
        })
        context('with testnet network', () => {
            const actualPositive = instanceWithTestnet.checkSign(
                '024b6bcf5552d193cda04ba9d129503a6318b5bd98c1a42cdc49e0a98b53a24796',
                'fake_data',
                '716c12a248071f782fe47212e1d8e7b729e361044213cf2a18aed5ae90c920885dbb57096312a228dedaa846896ac0e516f51d8daeb853413251a7a914541946',
            )
            it('should be return `true`', () => {
                assert.strictEqual(actualPositive, true)
            })
            try {
                instanceWithTestnet.checkSign(
                    'Invalid_Public_Key',
                    'fake_data',
                    '716c12a248071f782fe47212e1d8e7b729e361044213cf2a18aed5ae90c920885dbb57096312a228dedaa846896ac0e516f51d8daeb853413251a7a914541946',
                ) // check behavior in case of invalid public Key
            } catch (ex) {
                it('should be throw an error with following message `Expected isPoint, got Buffer`', () => {
                    assert.strictEqual(
                        ex.message,
                        'Expected isPoint, got Buffer',
                    )
                })
            }
            try {
                instanceWithTestnet.checkSign(
                    '024b6bcf5552d193cda04ba9d129503a6318b5bd98c1a42cdc49e0a98b53a24796',
                    'fake_data',
                    'invalid_sign',
                )
            } catch (ex) {
                it('should be throw an error with following message `Expected Signature`', () => {
                    assert.strictEqual(ex.message, 'Expected Signature')
                })
            }
        })
    })
})
